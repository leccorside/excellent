{"ast":null,"code":"const axios = require(\"axios\").default;\n\nconst pjson = require(\"../package.json\");\n\nmodule.exports = (cnpj, token) => {\n  if (!cnpj) throw new Error(\"CNPJ não informado\");\n  cnpj = cnpj.replace(/[^0-9]/g, \"\");\n  return new Promise((resolve, reject) => {\n    let url = \"\";\n\n    if (token) {\n      url = `https://comercial.cnpj.ws/cnpj/${cnpj}?token=${token}`;\n    } else {\n      url = `https://publica.cnpj.ws/cnpj/${cnpj}`;\n    }\n\n    axios({\n      method: \"get\",\n      url,\n      headers: {\n        \"User-Agent\": `consultar-cnpj/${pjson.version}`\n      }\n    }).then(response => resolve(response.data)).catch(error => {\n      if (error.response && error.response.data) {\n        reject(error.response.data);\n      } else {\n        reject(error);\n      }\n    });\n  });\n};\n\nmodule.exports.raiz = (raiz, token, options = {\n  page: 1\n}) => {\n  if (!raiz) throw new Error(\"Raiz do CNPJ não informada\");\n  if (!token) throw new Error(\"Token não informado\");\n  raiz = raiz.replace(/[^0-9]/g, \"\");\n  return new Promise((resolve, reject) => {\n    let url = `https://comercial.cnpj.ws/cnpj-raiz/${raiz}?token=${token}`;\n    const opt = [\"page\", \"nome_fantasia\", \"pais_id\", \"estado_id\", \"cidade_id\"];\n    opt.forEach(option => {\n      if (options[option]) url = `${url}&${option}=${options[option]}`;\n    });\n    axios({\n      method: \"get\",\n      url,\n      headers: {\n        \"User-Agent\": `consultar-cnpj/${pjson.version}`\n      }\n    }).then(response => resolve(response.data)).catch(error => {\n      if (error.response && error.response.data) {\n        reject(error.response.data);\n      } else {\n        reject(error);\n      }\n    });\n  });\n};\n\nmodule.exports.consumo = (token, ano, mes) => {\n  if (!token) throw new Error(\"Token não informado\");\n  return new Promise((resolve, reject) => {\n    let url = `https://comercial.cnpj.ws/consumo?token=${token}`;\n    if (ano) url = `${url}&ano=${ano}`;\n    if (mes && ano) url = `${url}&mes=${mes}`;\n    axios({\n      method: \"get\",\n      url,\n      headers: {\n        \"User-Agent\": `consultar-cnpj/${pjson.version}`\n      }\n    }).then(response => resolve(response.data.data)).catch(error => {\n      if (error.response && error.response.data) {\n        reject(error.response.data);\n      } else {\n        reject(error);\n      }\n    });\n  });\n};\n\nmodule.exports.pesquisa = (filtros = null, token, page = 1, limite = 100) => {\n  if (!token) throw new Error(\"Token não informado\");\n  if (!filtros) throw new Error(\"Filtros não informados\");\n  return new Promise((resolve, reject) => {\n    let url = `https://comercial.cnpj.ws/pesquisa?page=${page}&limite=${limite}&token=${token}`;\n    const fil = [\"atividade_principal_id\", \"atividade_secundaria_id\", \"atividade_id\", \"natureza_juridica_id\", \"razao_social\", \"nome_fantasia\", \"pais_id\", \"estado_id\", \"cidade_id\", \"cep\", \"situacao_cadastral\", \"data_situacao_cadastral_de\", \"data_situacao_cadastral_ate\", \"porte_id\", \"socio_nome\", \"data_inicio_atividade_de\", \"data_inicio_atividade_ate\"];\n    fil.forEach(filtro => {\n      if (filtros[filtro]) url = `${url}&${filtro}=${filtros[filtro]}`;\n    });\n    axios({\n      method: \"get\",\n      url,\n      headers: {\n        \"User-Agent\": `consultar-cnpj/${pjson.version}`\n      }\n    }).then(response => resolve(response.data)).catch(error => {\n      if (error.response && error.response.data) {\n        reject(error.response.data);\n      } else {\n        reject(error);\n      }\n    });\n  });\n};\n\nmodule.exports.suframa = (cnpj, inscricao, token) => {\n  if (!cnpj) throw new Error(\"CNPJ não informado\");\n  if (!inscricao) throw new Error(\"Inscrição não informada\");\n  cnpj = cnpj.replace(/[^0-9]/g, \"\");\n  inscricao = inscricao.replace(/[^0-9]/g, \"\");\n  return new Promise((resolve, reject) => {\n    let url = 'https://publica.cnpj.ws/suframa';\n    if (token) url = `https://comercial.cnpj.ws/suframa?token=${token}`;\n    axios({\n      method: \"post\",\n      url,\n      headers: {\n        \"User-Agent\": `consultar-cnpj/${pjson.version}`\n      },\n      data: {\n        cnpj,\n        inscricao\n      }\n    }).then(response => resolve(response.data)).catch(error => {\n      if (error.response && error.response.data) {\n        reject(error.response.data);\n      } else {\n        reject(error);\n      }\n    });\n  });\n};","map":null,"metadata":{},"sourceType":"script"}